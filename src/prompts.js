// Auto-generated from public/prompts.toml
// Do not edit this file directly - run utils/prompt_convert.py instead

const prompts = {
  landmarks: {
    title: `Landmark Discovery`,
    description: `Prompts for discovering and describing landmarks`,
    discovery: {
      template: `Generate a list of world-famous landmarks and points of interest near {location_name}.  
Focus ONLY on the most notable landmarks within approximately {radius} kilometers.

For each landmark, return:
- 'name': the most relevant and identifiable name to show on a map, and nothing else
- 'local': landmark local name in the native language of its country, used on its Wiki page
- 'description': a brief but informative summary (2-3 sentences, max 100 words)
- 'location': where is the landmark (district, city/region, state/province, country), not street address
- 'lat': landmark's latitude
- 'lon': landmark's longitude
- 'type': what's kind of landmark (Historical, Natural, Cultural, Architecture, Tourist attraction, etc)

Return ONLY the top 3 most important and interesting landmarks, ordered by relevance.

Format the response as a valid JSON object with a "landmarks" field containing an array of objects.
Each object should have the fields shown above.  Respond in my preferred locale: {locale}

Example format:
{
  "landmarks": [
    {
      "name": "Golden Gate Bridge",
      "local": "Golden Gate Bridge",
      "description": "An iconic symbol of San Francisco, the Golden Gate Bridge is a stunning suspension bridge",
      "location": "San Francisco, California, United States",
      "lat": 37.775,
      "lon": -122.419,
      "type": "Tourist attraction",
    },
    {
      "name": "Victoria Harbour",
      "local": "維多利亞港",
      "description": "Victoria Harbour is the natural harbour separating Hong Kong Island from the Kowloon Peninsula",
      "location": "Kowloon, Hong Kong",
      "lat": 22.2968,
      "lon": 114.1694,
      "type": "Tourist attraction",
    }
  ]
}`,
    },
    selector: {
      template: `Please select the top 3 most interesting landmarks from the following list:

{places_a}
---

Then recommend 3 additional important landmarks nearby, but NOT on the list above.

For each of the six landmarks, return:
- 'name': the most relevant and identifiable name to show on a map, and nothing else
- 'local': landmark local name in the native language of its country, used on its Wiki page
- 'description': a brief but informative summary (2-3 sentences, max 100 words)
- 'location': where is the landmark (district, city/region, state/province, country), not street address
- 'lat': landmark's latitude
- 'lon': landmark's longitude
- 'type': what's kind of landmark (Historical, Natural, Cultural, Architecture, Tourist attraction, etc)

Format the response as a valid JSON object with a "landmarks" field containing an array of objects.
Each object should have the fields shown above.  Respond in my preferred locale: {locale}

Example format:
{
  "landmarks": [
    {
      "name": "Golden Gate Bridge",
      "local": "Golden Gate Bridge",
      "description": "An iconic symbol of San Francisco, the Golden Gate Bridge is a stunning suspension bridge",
      "location": "San Francisco, California, United States",
      "lat": 37.775,
      "lon": -122.419,
      "type": "Tourist attraction",
    },
    {
      "name": "Victoria Harbour",
      "local": "維多利亞港",
      "description": "Victoria Harbour is the natural harbour separating Hong Kong Island from the Kowloon Peninsula",
      "location": "Kowloon, Hong Kong",
      "lat": 22.2968,
      "lon": 114.1694,
      "type": "Tourist attraction",
    }
  ]
}`,
    },
    airport: {
      template: `Generate a list of airports nearby coordinates: {lat}, {lon}.
If any, include uncontrolled airport in {location_name}.  Don't invent any airports.

For each airport, return:
- 'name': the official name to show on a map, and nothing else
- 'local': airport name and its location in the native language of its country
- 'description': a brief but informative summary (2-3 sentences, max 100 words)
- 'location': where is the airport (city/region, state/province, country), not street address
- 'lat': airport's latitude
- 'lon': airport's longitude
- 'type': ICAO code of the airport in 4-letter (e.g. KSFO), and nothing else

Format the response as a valid JSON object with a "landmarks" field containing an array of objects.
If none found, return empty array [].  Respond in my preferred locale: {locale}`,
    },
  },
  system_messages: {
    travel_agent: {
      template: `You are a knowledgeable global travel agent, specializing in “must-see” destinations worldwide.`,
    },
    landmark_specialist: {
      template: `You are a knowledgeable global travel agent, specializing in “must-see” destinations worldwide.
You will be provided with a list of popular landmarks within a specific location, ordered by relevance.
Your task is to compile a list of world-famous landmarks and points of interest near that location.`,
    },
    location_finder: {
      template: `You are a knowledgeable global travel agent, specializing in “must-see” destinations worldwide.
You will be given a "where is" query to identify what is the name of that specific location.`,
    },
    translator: {
      template: `You are an expert linguist specializing in software localization in standard JSON resource format.`,
    },
    reviewer: {
      template: `You are a linguistic reviewer specializing in software localization in standard JSON resource format.
You will be provided with a pair of source/target resource bundles to review and improve translation quality.`,
    },
  },
  translations: {
    title: `Auto-update LLM Translations`,
    description: `Prompts for automatic translations and L10n validation of JSON resource bundles`,
    json_resource: {
      template: `This is a translation task from locale code {source_lang} to {target_lang}.
Please provide the {target_lang} target translations for the following set of 
{source_lang} source strings of a Web frontend application.  The string keys 
may provide some translation context, but not always.

Output the target strings by preserving the same nested JSON structure,
while keeping any placeholders intact, and nothing else.
---
{source_strings}`,
    },
    quality_review: {
      template: `Your task is to ensure linguistic quality by carefully read and validate the following set of 
source/target strings translated from {source_lang} to {target_lang} in JSON resource bundles.
Modify specific target strings if better translation is found, based only on these criteria:
1. Accuracy (meaning preserved) and appropriate terminology (correct regional terms)
2. Fluency (natural in target language) and cultural appropriateness for local users
3. Linguistic consistency between similar contexts and patterns by fuzzy matching
4. i18n readiness for global deployment with AI generative multi-lingual contents

Make minimal changes.  Output the updated target resource only, in the same JSON structure.
If no changes is made, the output should be identical with the input below, and nothing else.
The source and target resources, delimited by XML tags <SOURCE_JSON></SOURCE_JSON> and 
<TARGET_JSON></TARGET_JSON>, are as follows:

<SOURCE_JSON>
{source_strings}
</SOURCE_JSON>

<TARGET_JSON>
{target_strings}
</TARGET_JSON>`,
    },
  },
  locations: {
    title: `Location Discovery`,
    description: `Prompts for discovering location names from natural language queries`,
    discovery: {
      template: `Where is "{query}"?

Please locate the specific geographic location being asked about:
- 'name': the most relevant and identifiable name to show on a map, and nothing else
- 'local': location local name in the native language of its country, used on its Wiki page
- 'desc': a brief but informative summary (2-3 sentences, max 100 words)
- 'lat': location's latitude
- 'lon': location's longitude

Format the response as a valid JSON object with the fields shown above.
Respond in my preferred locale: {locale}`,
    },
  },
  destinations: {
    title: `Landmark Description`,
    description: `Prompts for generating detailed descriptions of landmarks`,
    history: {
      template: `Generate a brief historical overview of {landmark_name} located in {location_name}.
Include when it was built/established, significant events, and its cultural importance.
Keep the response under 150 words and focus on verified historical facts.`,
    },
    architecture: {
      template: `Describe the architectural style and notable design elements of {landmark_name}.
Include information about the architect (if known), unique features, and any
interesting structural aspects. Keep the response under 150 words.`,
    },
    visitor_info: {
      template: `Provide concise visitor information for {landmark_name}, including typical 
visiting hours, best time to visit, any entrance fees, and 1-2 insider tips.
Focus on practical information that would be useful for a first-time visitor.
Keep the response under 100 words.`,
    },
  },
};

export default prompts;
